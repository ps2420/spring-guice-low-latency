/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dbs.sg.fx.rate.model.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Represents cross currency feeds from different sources */
@org.apache.avro.specific.AvroGenerated
public class FxRateModelA extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7745938015749782920L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FxRateModelA\",\"namespace\":\"com.dbs.sg.fx.rate.model.avro\",\"doc\":\"Represents cross currency feeds from different sources\",\"fields\":[{\"name\":\"uuid\",\"type\":\"string\",\"doc\":\"unique id for record\"},{\"name\":\"sourceSystem\",\"type\":\"string\",\"doc\":\"Represents Source System\"},{\"name\":\"takeCompID\",\"type\":\"string\",\"doc\":\"Unique system Id\"},{\"name\":\"symbol\",\"type\":\"string\",\"doc\":\"cross currency pair\"},{\"name\":\"tenor\",\"type\":\"string\",\"doc\":\"Tenor of Cross currency pair SPOT\"},{\"name\":\"bid\",\"type\":\"double\"},{\"name\":\"ask\",\"type\":\"double\"},{\"name\":\"bidSize\",\"type\":\"double\",\"default\":-1},{\"name\":\"askSize\",\"type\":\"double\",\"default\":-1},{\"name\":\"tradeable\",\"type\":\"boolean\",\"default\":\"true\"},{\"name\":\"timestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FxRateModelA> ENCODER =
      new BinaryMessageEncoder<FxRateModelA>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FxRateModelA> DECODER =
      new BinaryMessageDecoder<FxRateModelA>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<FxRateModelA> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<FxRateModelA> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FxRateModelA>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this FxRateModelA to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a FxRateModelA from a ByteBuffer. */
  public static FxRateModelA fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** unique id for record */
   private java.lang.CharSequence uuid;
  /** Represents Source System */
   private java.lang.CharSequence sourceSystem;
  /** Unique system Id */
   private java.lang.CharSequence takeCompID;
  /** cross currency pair */
   private java.lang.CharSequence symbol;
  /** Tenor of Cross currency pair SPOT */
   private java.lang.CharSequence tenor;
   private double bid;
   private double ask;
   private double bidSize;
   private double askSize;
   private boolean tradeable;
   private java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FxRateModelA() {}

  /**
   * All-args constructor.
   * @param uuid unique id for record
   * @param sourceSystem Represents Source System
   * @param takeCompID Unique system Id
   * @param symbol cross currency pair
   * @param tenor Tenor of Cross currency pair SPOT
   * @param bid The new value for bid
   * @param ask The new value for ask
   * @param bidSize The new value for bidSize
   * @param askSize The new value for askSize
   * @param tradeable The new value for tradeable
   * @param timestamp The new value for timestamp
   */
  public FxRateModelA(java.lang.CharSequence uuid, java.lang.CharSequence sourceSystem, java.lang.CharSequence takeCompID, java.lang.CharSequence symbol, java.lang.CharSequence tenor, java.lang.Double bid, java.lang.Double ask, java.lang.Double bidSize, java.lang.Double askSize, java.lang.Boolean tradeable, java.lang.CharSequence timestamp) {
    this.uuid = uuid;
    this.sourceSystem = sourceSystem;
    this.takeCompID = takeCompID;
    this.symbol = symbol;
    this.tenor = tenor;
    this.bid = bid;
    this.ask = ask;
    this.bidSize = bidSize;
    this.askSize = askSize;
    this.tradeable = tradeable;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return sourceSystem;
    case 2: return takeCompID;
    case 3: return symbol;
    case 4: return tenor;
    case 5: return bid;
    case 6: return ask;
    case 7: return bidSize;
    case 8: return askSize;
    case 9: return tradeable;
    case 10: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.CharSequence)value$; break;
    case 1: sourceSystem = (java.lang.CharSequence)value$; break;
    case 2: takeCompID = (java.lang.CharSequence)value$; break;
    case 3: symbol = (java.lang.CharSequence)value$; break;
    case 4: tenor = (java.lang.CharSequence)value$; break;
    case 5: bid = (java.lang.Double)value$; break;
    case 6: ask = (java.lang.Double)value$; break;
    case 7: bidSize = (java.lang.Double)value$; break;
    case 8: askSize = (java.lang.Double)value$; break;
    case 9: tradeable = (java.lang.Boolean)value$; break;
    case 10: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return unique id for record
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * unique id for record
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'sourceSystem' field.
   * @return Represents Source System
   */
  public java.lang.CharSequence getSourceSystem() {
    return sourceSystem;
  }

  /**
   * Sets the value of the 'sourceSystem' field.
   * Represents Source System
   * @param value the value to set.
   */
  public void setSourceSystem(java.lang.CharSequence value) {
    this.sourceSystem = value;
  }

  /**
   * Gets the value of the 'takeCompID' field.
   * @return Unique system Id
   */
  public java.lang.CharSequence getTakeCompID() {
    return takeCompID;
  }

  /**
   * Sets the value of the 'takeCompID' field.
   * Unique system Id
   * @param value the value to set.
   */
  public void setTakeCompID(java.lang.CharSequence value) {
    this.takeCompID = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return cross currency pair
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * cross currency pair
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'tenor' field.
   * @return Tenor of Cross currency pair SPOT
   */
  public java.lang.CharSequence getTenor() {
    return tenor;
  }

  /**
   * Sets the value of the 'tenor' field.
   * Tenor of Cross currency pair SPOT
   * @param value the value to set.
   */
  public void setTenor(java.lang.CharSequence value) {
    this.tenor = value;
  }

  /**
   * Gets the value of the 'bid' field.
   * @return The value of the 'bid' field.
   */
  public java.lang.Double getBid() {
    return bid;
  }

  /**
   * Sets the value of the 'bid' field.
   * @param value the value to set.
   */
  public void setBid(java.lang.Double value) {
    this.bid = value;
  }

  /**
   * Gets the value of the 'ask' field.
   * @return The value of the 'ask' field.
   */
  public java.lang.Double getAsk() {
    return ask;
  }

  /**
   * Sets the value of the 'ask' field.
   * @param value the value to set.
   */
  public void setAsk(java.lang.Double value) {
    this.ask = value;
  }

  /**
   * Gets the value of the 'bidSize' field.
   * @return The value of the 'bidSize' field.
   */
  public java.lang.Double getBidSize() {
    return bidSize;
  }

  /**
   * Sets the value of the 'bidSize' field.
   * @param value the value to set.
   */
  public void setBidSize(java.lang.Double value) {
    this.bidSize = value;
  }

  /**
   * Gets the value of the 'askSize' field.
   * @return The value of the 'askSize' field.
   */
  public java.lang.Double getAskSize() {
    return askSize;
  }

  /**
   * Sets the value of the 'askSize' field.
   * @param value the value to set.
   */
  public void setAskSize(java.lang.Double value) {
    this.askSize = value;
  }

  /**
   * Gets the value of the 'tradeable' field.
   * @return The value of the 'tradeable' field.
   */
  public java.lang.Boolean getTradeable() {
    return tradeable;
  }

  /**
   * Sets the value of the 'tradeable' field.
   * @param value the value to set.
   */
  public void setTradeable(java.lang.Boolean value) {
    this.tradeable = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new FxRateModelA RecordBuilder.
   * @return A new FxRateModelA RecordBuilder
   */
  public static com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder newBuilder() {
    return new com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder();
  }

  /**
   * Creates a new FxRateModelA RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FxRateModelA RecordBuilder
   */
  public static com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder newBuilder(com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder other) {
    return new com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder(other);
  }

  /**
   * Creates a new FxRateModelA RecordBuilder by copying an existing FxRateModelA instance.
   * @param other The existing instance to copy.
   * @return A new FxRateModelA RecordBuilder
   */
  public static com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder newBuilder(com.dbs.sg.fx.rate.model.avro.FxRateModelA other) {
    return new com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder(other);
  }

  /**
   * RecordBuilder for FxRateModelA instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FxRateModelA>
    implements org.apache.avro.data.RecordBuilder<FxRateModelA> {

    /** unique id for record */
    private java.lang.CharSequence uuid;
    /** Represents Source System */
    private java.lang.CharSequence sourceSystem;
    /** Unique system Id */
    private java.lang.CharSequence takeCompID;
    /** cross currency pair */
    private java.lang.CharSequence symbol;
    /** Tenor of Cross currency pair SPOT */
    private java.lang.CharSequence tenor;
    private double bid;
    private double ask;
    private double bidSize;
    private double askSize;
    private boolean tradeable;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceSystem)) {
        this.sourceSystem = data().deepCopy(fields()[1].schema(), other.sourceSystem);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.takeCompID)) {
        this.takeCompID = data().deepCopy(fields()[2].schema(), other.takeCompID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.symbol)) {
        this.symbol = data().deepCopy(fields()[3].schema(), other.symbol);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tenor)) {
        this.tenor = data().deepCopy(fields()[4].schema(), other.tenor);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bid)) {
        this.bid = data().deepCopy(fields()[5].schema(), other.bid);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ask)) {
        this.ask = data().deepCopy(fields()[6].schema(), other.ask);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bidSize)) {
        this.bidSize = data().deepCopy(fields()[7].schema(), other.bidSize);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.askSize)) {
        this.askSize = data().deepCopy(fields()[8].schema(), other.askSize);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.tradeable)) {
        this.tradeable = data().deepCopy(fields()[9].schema(), other.tradeable);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[10].schema(), other.timestamp);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FxRateModelA instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dbs.sg.fx.rate.model.avro.FxRateModelA other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sourceSystem)) {
        this.sourceSystem = data().deepCopy(fields()[1].schema(), other.sourceSystem);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.takeCompID)) {
        this.takeCompID = data().deepCopy(fields()[2].schema(), other.takeCompID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.symbol)) {
        this.symbol = data().deepCopy(fields()[3].schema(), other.symbol);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tenor)) {
        this.tenor = data().deepCopy(fields()[4].schema(), other.tenor);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bid)) {
        this.bid = data().deepCopy(fields()[5].schema(), other.bid);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ask)) {
        this.ask = data().deepCopy(fields()[6].schema(), other.ask);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bidSize)) {
        this.bidSize = data().deepCopy(fields()[7].schema(), other.bidSize);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.askSize)) {
        this.askSize = data().deepCopy(fields()[8].schema(), other.askSize);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.tradeable)) {
        this.tradeable = data().deepCopy(fields()[9].schema(), other.tradeable);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[10].schema(), other.timestamp);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * unique id for record
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * unique id for record
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * unique id for record
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * unique id for record
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceSystem' field.
      * Represents Source System
      * @return The value.
      */
    public java.lang.CharSequence getSourceSystem() {
      return sourceSystem;
    }

    /**
      * Sets the value of the 'sourceSystem' field.
      * Represents Source System
      * @param value The value of 'sourceSystem'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setSourceSystem(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sourceSystem = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceSystem' field has been set.
      * Represents Source System
      * @return True if the 'sourceSystem' field has been set, false otherwise.
      */
    public boolean hasSourceSystem() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sourceSystem' field.
      * Represents Source System
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearSourceSystem() {
      sourceSystem = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'takeCompID' field.
      * Unique system Id
      * @return The value.
      */
    public java.lang.CharSequence getTakeCompID() {
      return takeCompID;
    }

    /**
      * Sets the value of the 'takeCompID' field.
      * Unique system Id
      * @param value The value of 'takeCompID'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setTakeCompID(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.takeCompID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'takeCompID' field has been set.
      * Unique system Id
      * @return True if the 'takeCompID' field has been set, false otherwise.
      */
    public boolean hasTakeCompID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'takeCompID' field.
      * Unique system Id
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearTakeCompID() {
      takeCompID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * cross currency pair
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }

    /**
      * Sets the value of the 'symbol' field.
      * cross currency pair
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.symbol = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * cross currency pair
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'symbol' field.
      * cross currency pair
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenor' field.
      * Tenor of Cross currency pair SPOT
      * @return The value.
      */
    public java.lang.CharSequence getTenor() {
      return tenor;
    }

    /**
      * Sets the value of the 'tenor' field.
      * Tenor of Cross currency pair SPOT
      * @param value The value of 'tenor'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setTenor(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.tenor = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tenor' field has been set.
      * Tenor of Cross currency pair SPOT
      * @return True if the 'tenor' field has been set, false otherwise.
      */
    public boolean hasTenor() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'tenor' field.
      * Tenor of Cross currency pair SPOT
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearTenor() {
      tenor = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bid' field.
      * @return The value.
      */
    public java.lang.Double getBid() {
      return bid;
    }

    /**
      * Sets the value of the 'bid' field.
      * @param value The value of 'bid'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setBid(double value) {
      validate(fields()[5], value);
      this.bid = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bid' field has been set.
      * @return True if the 'bid' field has been set, false otherwise.
      */
    public boolean hasBid() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'bid' field.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearBid() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ask' field.
      * @return The value.
      */
    public java.lang.Double getAsk() {
      return ask;
    }

    /**
      * Sets the value of the 'ask' field.
      * @param value The value of 'ask'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setAsk(double value) {
      validate(fields()[6], value);
      this.ask = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ask' field has been set.
      * @return True if the 'ask' field has been set, false otherwise.
      */
    public boolean hasAsk() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'ask' field.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearAsk() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidSize' field.
      * @return The value.
      */
    public java.lang.Double getBidSize() {
      return bidSize;
    }

    /**
      * Sets the value of the 'bidSize' field.
      * @param value The value of 'bidSize'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setBidSize(double value) {
      validate(fields()[7], value);
      this.bidSize = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'bidSize' field has been set.
      * @return True if the 'bidSize' field has been set, false otherwise.
      */
    public boolean hasBidSize() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'bidSize' field.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearBidSize() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'askSize' field.
      * @return The value.
      */
    public java.lang.Double getAskSize() {
      return askSize;
    }

    /**
      * Sets the value of the 'askSize' field.
      * @param value The value of 'askSize'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setAskSize(double value) {
      validate(fields()[8], value);
      this.askSize = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'askSize' field has been set.
      * @return True if the 'askSize' field has been set, false otherwise.
      */
    public boolean hasAskSize() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'askSize' field.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearAskSize() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradeable' field.
      * @return The value.
      */
    public java.lang.Boolean getTradeable() {
      return tradeable;
    }

    /**
      * Sets the value of the 'tradeable' field.
      * @param value The value of 'tradeable'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setTradeable(boolean value) {
      validate(fields()[9], value);
      this.tradeable = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeable' field has been set.
      * @return True if the 'tradeable' field has been set, false otherwise.
      */
    public boolean hasTradeable() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'tradeable' field.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearTradeable() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.timestamp = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.dbs.sg.fx.rate.model.avro.FxRateModelA.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FxRateModelA build() {
      try {
        FxRateModelA record = new FxRateModelA();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sourceSystem = fieldSetFlags()[1] ? this.sourceSystem : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.takeCompID = fieldSetFlags()[2] ? this.takeCompID : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.symbol = fieldSetFlags()[3] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.tenor = fieldSetFlags()[4] ? this.tenor : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.bid = fieldSetFlags()[5] ? this.bid : (java.lang.Double) defaultValue(fields()[5]);
        record.ask = fieldSetFlags()[6] ? this.ask : (java.lang.Double) defaultValue(fields()[6]);
        record.bidSize = fieldSetFlags()[7] ? this.bidSize : (java.lang.Double) defaultValue(fields()[7]);
        record.askSize = fieldSetFlags()[8] ? this.askSize : (java.lang.Double) defaultValue(fields()[8]);
        record.tradeable = fieldSetFlags()[9] ? this.tradeable : (java.lang.Boolean) defaultValue(fields()[9]);
        record.timestamp = fieldSetFlags()[10] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FxRateModelA>
    WRITER$ = (org.apache.avro.io.DatumWriter<FxRateModelA>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FxRateModelA>
    READER$ = (org.apache.avro.io.DatumReader<FxRateModelA>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
